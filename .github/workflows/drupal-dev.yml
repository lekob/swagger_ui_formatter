name: PHP Composer

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master, gh-actions-test-with-drupal-dev ]

jobs:
  super-linter:
    name: Run Super Linter
    runs-on: self-hosted
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          # Full git history is needed to get a proper list of changed files within `super-linter`
          fetch-depth: 0

      - name: Checkout drupal-qa
        uses: actions/checkout@v2
        with:
          repository: Pronovix/drupal-qa
          path: ./drupal-qa

      - name: Install linters
        run: |
          cd drupal-qa
          composer install --ignore-platform-reqs

      - name: Lint the PHP code
        run: drupal-qa/vendor/bin/phpcs --standard=Drupal src/

#       - name: Lint Code Base
#         uses: github/super-linter@v3
#         env:
#           VALIDATE_ALL_CODEBASE: true
#           LOG_LEVEL: WARN
#           DEFAULT_BRANCH: master
#           VALIDATE_PHP_PHPCS: true
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#           FILTER_REGEX_EXCLUDE: .*Drupal.*

  phpcs:
    runs-on: self-hosted
    steps:
    - name: Checkout Swagger UI Formatter
      uses: actions/checkout@v2
      with:
        fetch-depth: 0 # important!

    - name: Checkout Drupal coding standard
      uses: actions/checkout@v2
      with:
        repository:  acquia/coding-standards-php
        path: ./coding_standards

    - name: Install PHP_CodeSniffer
      run: |
        curl -OL https://squizlabs.github.io/PHP_CodeSniffer/phpcs.phar
        php phpcs.phar --version

    - name: Run PHP Code Sniffer
      uses: tinovyatkin/action-php-codesniffer@v1
      with:
        files: "**.php" # you may customize glob as needed
        phpcs_path: php phpcs.phar
        standard: ./coding-standard/src/Standards/AcquiaDrupalStrict/ruleset.xml
        scope: file

  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        # Quoted because of the colon character in the image names.
        php_image: ["wodby/drupal-php:7.2-dev", "wodby/drupal-php:7.3-dev", "wodby/drupal-php:7.4-dev"]
        db_image: ["wodby/mariadb:10.3", "wodby/mariadb:10.4", "wodby/mariadb:10.5"]
        include:
          # include MariaDB 10.2 on PHP 7.2
          - php_image: "wodby/drupal-php:7.2-dev"
            db_image: "wodby/mariadb:10.2"

    steps:
    - name: Checkout Swagger UI Formatter
      uses: actions/checkout@v2

    - name: Checkout Drupal-Dev
      uses: actions/checkout@v2
      with:
        repository: Pronovix/docker-drupal-dev
        path: ./drupal-dev

    - name: Setup environment
      run: |
        mkdir build
        sudo chown runneradmin build
        ln -s drupal-dev/docker-compose.yml .
        ln -s drupal-dev/Dockerfile .
        printf "COMPOSE_PROJECT_NAME=swagger_ui_formatter\n" > .env
        chmod a+rw .
      # touch composer.lock
      # sudo chown runneradmin composer.lock
      # anyone can rw . because docker needs to create a composer.lock file in the . dir. Another option to research would be to touch composer.lock and change
      # its owner to runneradmin, but in that case the cache key, used by composer-cache, would need to be calcualted from something else than composer.lock
      # but... since composer.lock doesn't exist and needs to be created on every install composer-cache might be a mute point...
      # touch composer.lock: composer.lock must have valid JSON. Maybe something simple can fool composer... "./composer.lock" does not contain valid JSON

    - name: Create Docker containers
      env:
        PHP_IMAGE: ${{ matrix.php_image }}
        DB_IMAGE: ${{ matrix.db_image }}
      run: |
        docker-compose pull --quiet
        docker-compose up -d --build
    - name: Validate composer.json and composer.lock
      run: composer validate

    - uses: rishabhgupta/split-by@v1
      id: split
      with:
        string: ${{ matrix.php_image }}
        split-by: ':'

    - name: Make sure that the ./files/ folder exists
      run: mkdir files
    
    - run: ls -al files

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v2
      with:
        path: ./files
        key: ${{ runner.os }}-php-${{ steps.split.outputs._1 }}-ver-${{ secrets.CACHE_VERSION }}-${{ hashFiles('**/composer.json') }}

    - run: ls -al files

    - name: Copy Composer cache to Docker PHP container
      if: steps.composer-cache.outputs.cache-hit == 'true'
      run: |
        sudo chown -R runneradmin files
        docker cp ./files/files swagger_ui_formatter_php:/home/wodby/.composer/cache/
    - run: docker-compose exec -T php ls -al /home/wodby/.composer
    - run: docker-compose exec -T php ls -al /home/wodby/.composer/cache
    - run: docker-compose exec -T php ls -al /home/wodby/.composer/cache/files

    - name: Install dependencies
#       if: steps.composer-cache.outputs.cache-hit != 'true'
      run: docker-compose exec -T php composer install --no-interaction --no-suggest -d ..
      # Running composer install outsite the container will not work:
      # Root composer.json requires php ^7.2 but your php version (8.0.0) does not satisfy that requirement.
      # run: composer install --no-interaction --no-suggest

    - run: docker-compose exec -T php ls -al /home/wodby/.composer
    - run: docker-compose exec -T php ls -al /home/wodby/.composer/cache
    - run: docker-compose exec -T php ls -al /home/wodby/.composer/cache/files

    - name: Set up Drupal settings files
      run: |
        sudo chown -R runner build/web/sites
        ln -s ../../../../drupal-dev/drupal/settings.php build/web/sites/default/settings.php
        ln -s ../../../../drupal-dev/drupal/settings.shared.php build/web/sites/default/settings.shared.php
        ln -s ../../../../drupal-dev/drupal/settings.testing.php build/web/sites/default/settings.testing.php
        ln -s ../../../drupal-dev/drupal/development.services.yml.dist build/web/sites/development.services.yml.dist
        sudo chown -R runneradmin build/web/sites
    - name: Copy cache from Docker PHP Container
      run: |
        sudo chown -R runner files
        docker cp swagger_ui_formatter_php:/home/wodby/.composer/cache/files .

    - run: ls -al files
#     - name: Run tests
#       run: docker-compose exec -T --env XDEBUG_CONFIG="log_level=0" php ./vendor/bin/phpunit -c web/core -v --debug --printer '\Drupal\Tests\Listeners\HtmlOutputPrinter' web/modules/drupal_module/tests/

    # Add a test script to composer.json, for instance: "test": "vendor/bin/phpunit"
    # Docs: https://getcomposer.org/doc/articles/scripts.md

    # - name: Run test suite
    #   run: composer run-script test
