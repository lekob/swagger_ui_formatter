name: PHP Composer

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout Swagger UI Formatter
      uses: actions/checkout@v2

    - name: Checkout Drupal-Dev
      uses: actions/checkout@v2
      with:
        repository: Pronovix/docker-drupal-dev
        path: ./drupal-dev

    - name: Setup environment
      run: |
        mkdir build
        sudo chown runneradmin build
        ln -s drupal-dev/docker-compose.yml .
        ln -s drupal-dev/Dockerfile .
        printf "COMPOSE_PROJECT_NAME=swagger_ui_formatter\n" > .env
        chmod a+rw .
      # touch composer.lock
      # sudo chown runneradmin composer.lock
      # anyone can rw . because docker needs to create a composer.lock file in the . dir. Another option to research would be to touch composer.lock and change
      # its owner to runneradmin, but in that case the cache key, used by composer-cache, would need to be calcualted from something else than composer.lock
      # but... since composer.lock doesn't exist and needs to be created on every install composer-cache might be a mute point...
      # touch composer.lock: composer.lock must have valid JSON. Maybe something simple can fool composer... "./composer.lock" does not contain valid JSON

    - name: Create Docker containers
      run: |
        docker-compose pull --quiet
        docker-compose up -d --build

    - name: Validate composer.json and composer.lock
      run: composer validate

#     - name: Cache Composer packages
#       id: composer-cache
#       uses: actions/cache@v2
#       with:
#         path: ./build/vendor
#         key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
#         restore-keys: |
#           ${{ runner.os }}-php-

    - name: Install dependencies
#       if: steps.composer-cache.outputs.cache-hit != 'true'
      run: docker-compose exec -T php composer install --no-interaction --no-suggest -d ..

    - name: Set up Drupal settings files
      run: |
        sudo chown -R runneradmin drupal-dev
        docker-compose exec -T php ls -al *
        docker-compose exec -T php ln -s ../../../../drupal-dev/drupal/settings.php web/sites/default/settings.php
        docker-compose exec -T php ln -s ../../../../drupal-dev/drupal/settings.shared.php web/sites/default/settings.shared.php
        docker-compose exec -T php ln -s ../../../../drupal-dev/drupal/settings.testing.php web/sites/default/settings.testing.php
        docker-compose exec -T php ln -s ../../../drupal-dev/drupal/development.services.yml.dist web/sites/development.services.yml.dist

    - name: Run tests
      run: docker-compose exec -T --env XDEBUG_CONFIG="log_level=0" php ./vendor/bin/phpunit -c web/core -v --debug --printer '\Drupal\Tests\Listeners\HtmlOutputPrinter' web/modules/drupal_module/tests/

    # Add a test script to composer.json, for instance: "test": "vendor/bin/phpunit"
    # Docs: https://getcomposer.org/doc/articles/scripts.md

    # - name: Run test suite
    #   run: composer run-script test
